<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.study.SpringSecurityMybatis.repository.UserMapper">
    <resultMap id="userResultMap" type="com.study.SpringSecurityMybatis.entity.User">
        <id property="id" column="user_id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="name" column="name" />
        <result property="email" column="email" />
        <result property="img" column="img" />
        <collection property="oAuth2Users" javaType="java.util.Set" resultMap="oAuth2UserResultMap" />
        <collection property="userRoles" javaType="java.util.Set" resultMap="userRolesResultMap" />
    </resultMap>

    <resultMap id="oAuth2UserResultMap" type="com.study.SpringSecurityMybatis.entity.OAuth2User">
        <id property="id" column="oauth2_user_id" />
        <result property="userId" column="ou_user_id" />
        <result property="oAuth2Name" column="oauth2_name" />
        <result property="provider" column="provider" />
    </resultMap>

    <resultMap id="userRolesResultMap" type="com.study.SpringSecurityMybatis.entity.UserRoles">
        <id property="id" column="user_roles_id" />
        <result property="userId" column="ur_user_id" />
        <result property="roleId" column="ur_role_id" />
        <association property="role" resultMap="roleResultMap" />
    </resultMap>

    <resultMap id="roleResultMap" type="com.study.SpringSecurityMybatis.entity.Role">
        <id property="id" column="role_id" />
        <result property="name" column="role_name" />
    </resultMap>

    <update id="modifyImgById">
        update user
        set
            img = #{img}
        where
            id = #{id}
    </update>

    <delete id="deleteById">
        delete
        from
            user
        where
            id = #{id}
    </delete>

    <select id="findByUsername" resultMap="userResultMap">
        select
            u.id as user_id,
            u.username,
            u.password,
            u.name,
            u.email,
            u.img,
            ou.id as oauth2_user_id,
            ou.user_id as ou_user_id,
            ou.oauth2_name,
            ou.provider,
            ur.id as user_roles_id,
            ur.user_id as ur_user_id,
            ur.role_id as ur_role_id,
            r.id as role_id,
            r.name as role_name
        from
            user u
            left outer join oauth2_user ou on(ou.user_id = u.id)
            left outer join user_roles ur on(ur.user_id = u.id)
            left outer join role r on(r.id = ur.role_id)
        where
            username = #{username}
    </select>

    <select id="findByOAuth2Name" resultMap="userResultMap">
        select
            u.id as user_id,
            u.username,
            u.password,
            u.name,
            u.email,
            u.img,
            ou.id as oauth2_user_id,
            ou.user_id as ou_user_id,
            ou.oauth2_name,
            ou.provider,
            ur.id as user_roles_id,
            ur.user_id as ur_user_id,
            ur.role_id as ur_role_id,
            r.id as role_id,
            r.name as role_name
        from
            user u
            left outer join oauth2_user ou on(ou.user_id = u.id)
            left outer join user_roles ur on(ur.user_id = u.id)
            left outer join role r on(r.id = ur.role_id)
        where
            ou.oauth2_name = #{oauth2Name}
    </select>


    <select id="findById" resultMap="userResultMap">
        select
            u.id as user_id,
            u.username,
            u.password,
            u.name,
            u.email,
            u.img,
            ou.id as oauth2_user_id,
            ou.user_id as ou_user_id,
            ou.oauth2_name,
            ou.provider,
            ur.id as user_roles_id,
            ur.user_id as ur_user_id,
            ur.role_id as ur_role_id,
            r.id as role_id,
            r.name as role_name
        from
            user u
            left outer join oauth2_user ou on(ou.user_id = u.id)
            left outer join user_roles ur on(ur.user_id = u.id)
            left outer join role r on(r.id = ur.role_id)
        where
            u.id = #{id}
    </select>

    <insert id="save"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into user
        values(default, #{username}, #{password}, #{name}, #{email}, default)
    </insert>

</mapper>